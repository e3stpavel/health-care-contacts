// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UtterlyComplete.Infrastructure.Data.Contexts;

#nullable disable

namespace UtterlyComplete.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.4");

            modelBuilder.Entity("ContactMechanismParty", b =>
                {
                    b.Property<int>("ContactMechanismsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PartiesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ContactMechanismsId", "PartiesId");

                    b.HasIndex("PartiesId");

                    b.ToTable("ContactMechanismParty");
                });

            modelBuilder.Entity("UtterlyComplete.Domain.Entities.Core.ContactMechanism", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("TEXT");

                    b.Property<int?>("FacilityId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.ToTable("ContactMechanisms");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ContactMechanism");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("UtterlyComplete.Domain.Entities.Core.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("TEXT");

                    b.Property<int>("FacilityTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PartOfFacilityId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FacilityTypeId");

                    b.HasIndex("PartOfFacilityId");

                    b.ToTable("Facilities");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Facility");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("UtterlyComplete.Domain.Entities.Core.FacilityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FacilityType");
                });

            modelBuilder.Entity("UtterlyComplete.Domain.Entities.Core.Party", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FacilityId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.ToTable("Parties");
                });

            modelBuilder.Entity("UtterlyComplete.Domain.Entities.ContactMechanisms.ElectronicAddress", b =>
                {
                    b.HasBaseType("UtterlyComplete.Domain.Entities.Core.ContactMechanism");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("ElectronicAddressString");

                    b.ToTable("ContactMechanisms");

                    b.HasDiscriminator().HasValue("ElectronicAddress");
                });

            modelBuilder.Entity("UtterlyComplete.Domain.Entities.ContactMechanisms.PostalAddress", b =>
                {
                    b.HasBaseType("UtterlyComplete.Domain.Entities.Core.ContactMechanism");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("TEXT");

                    b.ToTable("ContactMechanisms");

                    b.HasDiscriminator().HasValue("PostalAddress");
                });

            modelBuilder.Entity("UtterlyComplete.Domain.Entities.ContactMechanisms.TelecommunicationsNumber", b =>
                {
                    b.HasBaseType("UtterlyComplete.Domain.Entities.Core.ContactMechanism");

                    b.Property<string>("AreaCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryCode")
                        .HasColumnType("TEXT");

                    b.ToTable("ContactMechanisms");

                    b.HasDiscriminator().HasValue("TelecommunicationsNumber");
                });

            modelBuilder.Entity("UtterlyComplete.Domain.Entities.Facilities.AmbulatorySurgeryCenter", b =>
                {
                    b.HasBaseType("UtterlyComplete.Domain.Entities.Core.Facility");

                    b.HasDiscriminator().HasValue("AmbulatorySurgeryCenter");
                });

            modelBuilder.Entity("UtterlyComplete.Domain.Entities.Facilities.Clinic", b =>
                {
                    b.HasBaseType("UtterlyComplete.Domain.Entities.Core.Facility");

                    b.HasDiscriminator().HasValue("Clinic");
                });

            modelBuilder.Entity("UtterlyComplete.Domain.Entities.Facilities.Floor", b =>
                {
                    b.HasBaseType("UtterlyComplete.Domain.Entities.Core.Facility");

                    b.HasDiscriminator().HasValue("Floor");
                });

            modelBuilder.Entity("UtterlyComplete.Domain.Entities.Facilities.Hospital", b =>
                {
                    b.HasBaseType("UtterlyComplete.Domain.Entities.Core.Facility");

                    b.HasDiscriminator().HasValue("Hospital");
                });

            modelBuilder.Entity("UtterlyComplete.Domain.Entities.Facilities.MedicalBuilding", b =>
                {
                    b.HasBaseType("UtterlyComplete.Domain.Entities.Core.Facility");

                    b.HasDiscriminator().HasValue("MedicalBuilding");
                });

            modelBuilder.Entity("UtterlyComplete.Domain.Entities.Facilities.MedicalOffice", b =>
                {
                    b.HasBaseType("UtterlyComplete.Domain.Entities.Core.Facility");

                    b.HasDiscriminator().HasValue("MedicalOffice");
                });

            modelBuilder.Entity("UtterlyComplete.Domain.Entities.Facilities.Room", b =>
                {
                    b.HasBaseType("UtterlyComplete.Domain.Entities.Core.Facility");

                    b.HasDiscriminator().HasValue("Room");
                });

            modelBuilder.Entity("ContactMechanismParty", b =>
                {
                    b.HasOne("UtterlyComplete.Domain.Entities.Core.ContactMechanism", null)
                        .WithMany()
                        .HasForeignKey("ContactMechanismsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UtterlyComplete.Domain.Entities.Core.Party", null)
                        .WithMany()
                        .HasForeignKey("PartiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UtterlyComplete.Domain.Entities.Core.ContactMechanism", b =>
                {
                    b.HasOne("UtterlyComplete.Domain.Entities.Core.Facility", null)
                        .WithMany("ContactMechanisms")
                        .HasForeignKey("FacilityId");
                });

            modelBuilder.Entity("UtterlyComplete.Domain.Entities.Core.Facility", b =>
                {
                    b.HasOne("UtterlyComplete.Domain.Entities.Core.FacilityType", "FacilityType")
                        .WithMany("Facilities")
                        .HasForeignKey("FacilityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UtterlyComplete.Domain.Entities.Core.Facility", "PartOfFacility")
                        .WithMany("ConsistsOfFacilities")
                        .HasForeignKey("PartOfFacilityId");

                    b.Navigation("FacilityType");

                    b.Navigation("PartOfFacility");
                });

            modelBuilder.Entity("UtterlyComplete.Domain.Entities.Core.Party", b =>
                {
                    b.HasOne("UtterlyComplete.Domain.Entities.Core.Facility", null)
                        .WithMany("Parties")
                        .HasForeignKey("FacilityId");
                });

            modelBuilder.Entity("UtterlyComplete.Domain.Entities.Core.Facility", b =>
                {
                    b.Navigation("ConsistsOfFacilities");

                    b.Navigation("ContactMechanisms");

                    b.Navigation("Parties");
                });

            modelBuilder.Entity("UtterlyComplete.Domain.Entities.Core.FacilityType", b =>
                {
                    b.Navigation("Facilities");
                });
#pragma warning restore 612, 618
        }
    }
}
